// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/rpc.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protocol/rpc.proto", fileDescriptor_13c0112e17e3b459) }

var fileDescriptor_13c0112e17e3b459 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x2a, 0x48, 0xd6, 0x03, 0x73, 0x84, 0x38, 0x60, 0x62, 0x52,
	0xe2, 0x70, 0xd9, 0x94, 0xfc, 0xf2, 0xbc, 0x9c, 0xfc, 0xc4, 0x14, 0x88, 0x12, 0x29, 0x61, 0xb8,
	0x44, 0x71, 0x65, 0x1e, 0x54, 0x9f, 0x94, 0x08, 0xc2, 0xac, 0xd4, 0x9c, 0xc4, 0x4a, 0x88, 0xa8,
	0xd1, 0x45, 0x46, 0x2e, 0xee, 0xe0, 0xca, 0xbc, 0xe4, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54,
	0x21, 0x57, 0x2e, 0x0e, 0x10, 0xd7, 0x2d, 0x33, 0x27, 0x55, 0x48, 0x52, 0x0f, 0xa6, 0x45, 0xcf,
	0x05, 0x6a, 0x41, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x14, 0x36, 0xa9, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x06, 0x03, 0x46, 0x21, 0x6b, 0x88, 0x31, 0xbe, 0xa9, 0x25, 0x89,
	0x42, 0xa2, 0x08, 0xb5, 0x20, 0x31, 0x98, 0x11, 0x62, 0xe8, 0xc2, 0x30, 0xed, 0x42, 0x76, 0x5c,
	0x9c, 0x41, 0x20, 0x27, 0x7a, 0xe6, 0xa5, 0xe5, 0x0b, 0x21, 0x29, 0x03, 0x0b, 0xc2, 0xb4, 0x8b,
	0x63, 0x88, 0xc3, 0xf4, 0x27, 0xb1, 0x81, 0x65, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc,
	0x33, 0x10, 0x82, 0x3e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncServiceClient interface {
	SyncFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (SyncService_SyncFileClient, error)
	SyncMeta(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	RelayInfo(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error)
}

type syncServiceClient struct {
	cc *grpc.ClientConn
}

func NewSyncServiceClient(cc *grpc.ClientConn) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) SyncFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (SyncService_SyncFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SyncService_serviceDesc.Streams[0], "/protocol.SyncService/SyncFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncServiceSyncFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SyncService_SyncFileClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type syncServiceSyncFileClient struct {
	grpc.ClientStream
}

func (x *syncServiceSyncFileClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncServiceClient) SyncMeta(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/protocol.SyncService/SyncMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) RelayInfo(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error) {
	out := new(RelayResponse)
	err := c.cc.Invoke(ctx, "/protocol.SyncService/RelayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServiceServer is the server API for SyncService service.
type SyncServiceServer interface {
	SyncFile(*DownloadRequest, SyncService_SyncFileServer) error
	SyncMeta(context.Context, *SyncRequest) (*SyncResponse, error)
	RelayInfo(context.Context, *RelayRequest) (*RelayResponse, error)
}

func RegisterSyncServiceServer(s *grpc.Server, srv SyncServiceServer) {
	s.RegisterService(&_SyncService_serviceDesc, srv)
}

func _SyncService_SyncFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServiceServer).SyncFile(m, &syncServiceSyncFileServer{stream})
}

type SyncService_SyncFileServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type syncServiceSyncFileServer struct {
	grpc.ServerStream
}

func (x *syncServiceSyncFileServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SyncService_SyncMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).SyncMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.SyncService/SyncMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).SyncMeta(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_RelayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).RelayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.SyncService/RelayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).RelayInfo(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncMeta",
			Handler:    _SyncService_SyncMeta_Handler,
		},
		{
			MethodName: "RelayInfo",
			Handler:    _SyncService_RelayInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncFile",
			Handler:       _SyncService_SyncFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/rpc.proto",
}
